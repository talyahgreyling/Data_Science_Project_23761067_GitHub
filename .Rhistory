metrics = metric_set(rmse)
)
# Evaluate how RF performs with different mtry values
fig4 <- model_res %>%
collect_metrics() %>%
ggplot(aes(x = mtry, y = mean)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y") +
labs(
title = "Random Forest Performance by mtry",
x = "mtry (number of variables tried at each split)",
y = "Mean metric value (lower = better)",
color = "mtry"
) +
theme_minimal()
fig4
ggsave("writeup/fig4.png", plot = fig4, width = 6, height = 5, dpi = 300)
include_graphics("writeup/fig4.png")
# final fit and evaluation
best_params <- model_res %>%
show_best(metric = "rmse") %>%
slice(1)
# Plug optimal hyperparameters into workflow & fit on all training data
(final_model <- finalize_workflow(model_workflow, best_params))
final_fit <- final_model %>%
fit(data = training_ratings)
# Inspect trained model
final_fit %>%
extract_fit_parsnip()
# Asses how model performs on unseen data
table3 <- predict(final_fit, testing_ratings) %>%
bind_cols(testing_ratings) %>%
metrics(truth = rating.x, estimate = .pred)
table3
# Which features had the most influence on predictions
fitted_model <- final_fit %>%
extract_fit_parsnip()
varimp <- vi(fitted_model)
varimp
# Draw VIP
fig5 <- vip(fitted_model, num_features = 20, geom = "col",
aesthetics = list(fill = "#CE677A")) +
labs(
title = "Variable Importance Plot of Top 20 Words Identified by Random Forest") +
theme_minimal()
fig5
ggsave("writeup/fig5.png", plot = fig5, width = 6, height = 5, dpi = 300)
include_graphics("writeup/fig5.png")
# Convert data for wordcloud
df_wordcloud <- vi(fitted_model) %>%
arrange(desc(Importance)) %>%
slice(1:50) %>%
select(word = Variable, freq = Importance)
View(df_wordcloud)
fig6 <- wordcloud(words_popular$word,
words_popular$freq,
scale = c(4, 1),
colors = palette,
bg.color = "white")
fig6
# Draw wordcloud
fig6 <- wordcloud(df_wordcloud$word,
df_wordcloud$freq,
scale = c(4, 1),
colors = palette,
bg.color = "white")
fig6
fig6 <- wordcloud(df_wordcloud$word,
df_wordcloud$freq,
scale = c(5, 1),
colors = palette,
bg.color = "white")
fig6
ggsave("writeup/fig6.png", plot = fig6, width = 6, height = 5, dpi = 300)
# Convert data for wordcloud
df_wordcloud <- vi(fitted_model) %>%
arrange(desc(Importance)) %>%
slice(1:50) %>%
select(word = Variable, freq = Importance)
# Draw wordcloud
fig6 <- wordcloud(df_wordcloud$word,
df_wordcloud$freq,
scale = c(5, 1),
colors = palette,
bg.color = "white")
fig6
###################### HERE
ggsave("writeup/fig6.png", plot = fig6, width = 6, height = 5, dpi = 300)
include_graphics("writeup/fig6.png")
fig5 <-  ggplot(final_results, aes(x = estimate, y = term, fill = effect)) +
geom_col() +
scale_fill_brewer(palette = "Dark2") +
labs(
title = "Words Most Associated with Higher Wine Ratings",
x = "Effect on Rating",
y = "Word"
) +
theme_bw()
fig5
# Filter dtm by top 20 words determined by RF
top_20 <- vip(fitted_model, num_features = 20)$data$Variable
df_ols <- dtm %>%
select(rating.x, all_of(top_20))
ols_model <- lm(rating.x ~ ., data = df_ols)
summary(ols_model)
### Table 4 ###
# ols_tidy %>%
#   kable(format = "latex", booktabs = TRUE, digits = 3) %>%
#   save_kable("ols_results.tex")
# Tidy results
ols_results <- broom::tidy(ols_model) %>%
arrange(desc(estimate))
# Filter out intercept and format
final_results <- ols_results %>%
filter(term != "(Intercept)") %>%
select(term, estimate, p.value) %>%
mutate(
effect = ifelse(estimate > 0, "Positive", "Negative"),
term = fct_reorder(term, estimate)
)
final_results
fig5 <-  ggplot(final_results, aes(x = estimate, y = term, fill = effect)) +
geom_col() +
scale_fill_brewer(palette = "Dark2") +
labs(
title = "Words Most Associated with Higher Wine Ratings",
x = "Effect on Rating",
y = "Word"
) +
theme_bw()
fig5
fig5 <-  ggplot(final_results, aes(x = estimate, y = term, fill = effect)) +
geom_col() +
scale_fill_brewer(palette = c("red", "green")) +
labs(
title = "Words Most Associated with Higher Wine Ratings",
x = "Effect on Rating",
y = "Word"
) +
theme_bw()
fig5
fig5 <-  ggplot(final_results, aes(x = estimate, y = term, fill = effect)) +
geom_col() +
scale_fill_brewer(palette = c("red", "green")) +
labs(
title = "Words Most Associated with Higher Wine Ratings",
x = "Effect on Rating",
y = "Word"
) +
theme_bw()
fig5
fig5 <-  ggplot(final_results, aes(x = estimate, y = term, fill = effect)) +
geom_col() +
scale_fill_manual(values = c("#5c2011", "#163940")) +
labs(
title = "Words Most Associated with Higher Wine Ratings",
x = "Effect on Rating",
y = "Word"
) +
theme_bw()
fig5
fig5 <-  ggplot(final_results, aes(x = estimate, y = term, fill = effect)) +
geom_col() +
scale_fill_manual(values = c("#9c0315", "#4d8049")) +
labs(
title = "Words Most Associated with Higher Wine Ratings",
x = "Effect on Rating",
y = "Word"
) +
theme_bw()
fig5
fig7 <-  ggplot(final_results, aes(x = estimate, y = term, fill = effect)) +
geom_col() +
scale_fill_manual(values = c("#9c0315", "#4d8049")) +
labs(
title = "Words Most Associated with Higher Wine Ratings",
x = "Effect on Rating",
y = "Word"
) +
theme_bw()
fig7
ggsave("writeup/fig7.png", plot = fig7, width = 6, height = 5, dpi = 300)
fig7 <-  ggplot(final_results, aes(x = estimate, y = term, fill = effect)) +
geom_col() +
scale_fill_manual(values = c("#9c0315", "#4d8049")) +
labs(
title = "Words with Strongest Correlation to Wine Ratings",
x = "Effect on Rating",
y = "Word"
) +
theme_bw()
fig7
include_graphics("writeup/fig7.png")
include_graphics("writeup/vivino.png")
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE,
fig.width = 6,
fig.height = 5,
fig.align = 'center',
fig.pos = 'H')
# Set theme & colour palette
palette <- c("#4d8049", "#3A7370", "#FFC57B", "#FB9072", "#CE677A", "#9c0315")
my_theme <- theme(
# Title, subtitle, and caption
plot.title = element_text(colour = "white", size = 16, family = "arial", hjust = 0.5,face = "bold"),
plot.subtitle = element_text(colour = "white", size = 14, family = "arial"),
plot.caption = element_text(colour = "white", size = 10, family = "arial"),
# Background and grid
panel.background = element_blank(),
plot.background = element_rect(fill = "black", color = "black"),
panel.grid.major = element_line(color = "white", size = 0.1),
panel.grid.minor = element_line(color = "white", size = 0.1),
# Axis titles and labels
axis.title.x = element_text(colour = "white", size = 12,family = "arial", hjust = 0.5,face = "bold"),
axis.title.y = element_text(colour = "white", size = 12,family = "arial", hjust = 0.5,face = "bold"),
axis.text.y = element_text(colour = "white", size = 10,family = "arial"),
axis.text.x = element_text(colour = "white", size = 10,family = "arial"),
# Legend
legend.position = "right",
legend.text = element_text(colour = "white",size = 12, family = "arial"),
legend.title = element_text(colour = "white",size = 12, family = "arial", hjust = 3,face = "bold"),
legend.key = element_rect(fill = "black", color = "black"),
legend.background = element_rect(fill = "black"),
# Other
axis.ticks = element_blank(),
strip.text = element_text(colour = "white", size = 12, family = "arial", vjust = 1, hjust = 0.5)
)
fig1 <- ggplot(words_ratings_counts, aes(x = ave_rating)) +
geom_histogram(aes(y = ..count..), binwidth =0.5, bins = 30, fill = "#3A7370", color = "black", alpha = 1) +
my_theme() +
labs(title = "Histogram of average ratings of review tokens",
x = "Average Rating",
y = "Frequency")
fig1
my_theme <- theme(
# Title, subtitle, and caption
plot.title = element_text(colour = "white", size = 16, family = "arial", hjust = 0.5,face = "bold"),
plot.subtitle = element_text(colour = "white", size = 14, family = "arial"),
plot.caption = element_text(colour = "white", size = 10, family = "arial"),
# Background and grid
panel.background = element_rect(fill = "white", colour = "black"),
plot.background = element_rect(fill = "black", color = "black"),
panel.grid.major = element_line(color = "white", size = 0.1),
panel.grid.minor = element_line(color = "white", size = 0.1),
# Axis titles and labels
axis.title.x = element_text(colour = "white", size = 12,family = "arial", hjust = 0.5,face = "bold"),
axis.title.y = element_text(colour = "white", size = 12,family = "arial", hjust = 0.5,face = "bold"),
axis.text.y = element_text(colour = "white", size = 10,family = "arial"),
axis.text.x = element_text(colour = "white", size = 10,family = "arial"),
# Legend
legend.position = "right",
legend.text = element_text(colour = "white",size = 12, family = "arial"),
legend.title = element_text(colour = "white",size = 12, family = "arial", hjust = 3,face = "bold"),
legend.key = element_rect(fill = "black", color = "black"),
legend.background = element_rect(fill = "black"),
# Other
axis.ticks = element_blank(),
strip.text = element_text(colour = "white", size = 12, family = "arial", vjust = 1, hjust = 0.5)
)
my_theme <- theme(
# Title, subtitle, and caption
plot.title = element_text(colour = "white", size = 16, family = "arial", hjust = 0.5,face = "bold"),
plot.subtitle = element_text(colour = "white", size = 14, family = "arial"),
plot.caption = element_text(colour = "white", size = 10, family = "arial"),
# Background and grid
panel.background = element_rect(fill = "white", colour = "black"),
plot.background = element_rect(fill = "white", color = "black"),
panel.grid.major = element_line(color = "white", size = 0.1),
panel.grid.minor = element_line(color = "white", size = 0.1),
# Axis titles and labels
axis.title.x = element_text(colour = "white", size = 12,family = "arial", hjust = 0.5,face = "bold"),
axis.title.y = element_text(colour = "white", size = 12,family = "arial", hjust = 0.5,face = "bold"),
axis.text.y = element_text(colour = "white", size = 10,family = "arial"),
axis.text.x = element_text(colour = "white", size = 10,family = "arial"),
# Legend
legend.position = "right",
legend.text = element_text(colour = "white",size = 12, family = "arial"),
legend.title = element_text(colour = "white",size = 12, family = "arial", hjust = 3,face = "bold"),
legend.key = element_rect(fill = "black", color = "black"),
legend.background = element_rect(fill = "black"),
# Other
axis.ticks = element_blank(),
strip.text = element_text(colour = "white", size = 12, family = "arial", vjust = 1, hjust = 0.5)
)
# Plot histogram
fig1 <- ggplot(words_ratings_counts, aes(x = ave_rating)) +
geom_histogram(aes(y = ..count..), binwidth =0.5, bins = 30, fill = "#3A7370", color = "black", alpha = 1) +
theme_minimal() +
labs(title = "Histogram of average ratings of review tokens",
x = "Average Rating",
y = "Frequency")
fig1
fig1 <- ggplot(words_ratings_counts, aes(x = ave_rating)) +
geom_histogram(aes(y = ..count..), binwidth =0.5, bins = 30, fill = "#3A7370", color = "black", alpha = 1) +
theme_minimal() +
labs(title = "Histogram of average ratings of review tokens",
x = "Average Rating",
y = "Frequency")
fig1
# RandomForest recipe
wine_rec <- recipe(rating.x ~ ., data = training_ratings) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors())
# RandomForest specification model
model_spec <- rand_forest(
mtry = tune(),
min_n = 10,
trees = 100
) %>%
set_engine("ranger", num.threads = 10,
importance = "permutation") %>%
set_mode("regression")
# Inspect the low level call
model_spec %>%
translate()
# Building the workflow
(model_workflow <- workflow() %>%
add_recipe(wine_rec) %>%
add_model(model_spec))
# Cross validation
(cv_folds <- vfold_cv(training_ratings, v = 5, repeats = 1))
# Set regular grid
grid_vals <- grid_regular(mtry(range = c(10, 18)), levels = 5)
model_res <- model_workflow %>%
tune_grid(
resamples = cv_folds,
grid = grid_vals,
control = control_grid(save_pred = TRUE),
metrics = metric_set(rmse)
)
# final fit and evaluation
best_params <- model_res %>%
show_best(metric = "rmse") %>%
slice(1)
# Plug optimal hyperparameters into workflow & fit on all training data
(final_model <- finalize_workflow(model_workflow, best_params))
final_fit <- final_model %>%
fit(data = training_ratings)
# Inspect trained model
final_fit %>%
extract_fit_parsnip()
# Asses how model performs on unseen data
table3 <- predict(final_fit, testing_ratings) %>%
bind_cols(testing_ratings) %>%
metrics(truth = rating.x, estimate = .pred)
table3
# RandomForest recipe
wine_rec <- recipe(rating.x ~ ., data = training_ratings) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_numeric_predictors())
# RandomForest specification model
model_spec <- rand_forest(
mtry = tune(),
min_n = 10,
trees = 100
) %>%
set_engine("ranger", num.threads = 10,
importance = "permutation") %>%
set_mode("regression")
# Inspect the low level call
model_spec %>%
translate()
# Building the workflow
(model_workflow <- workflow() %>%
add_recipe(wine_rec) %>%
add_model(model_spec))
# Cross validation
(cv_folds <- vfold_cv(training_ratings, v = 5, repeats = 1))
# Set regular grid
grid_vals <- grid_regular(mtry(range = c(10, 18)), levels = 5)
model_res <- model_workflow %>%
tune_grid(
resamples = cv_folds,
grid = grid_vals,
control = control_grid(save_pred = TRUE),
metrics = metric_set(rmse)
)
# final fit and evaluation
best_params <- model_res %>%
show_best(metric = "rmse") %>%
slice(1)
# Plug optimal hyperparameters into workflow & fit on all training data
(final_model <- finalize_workflow(model_workflow, best_params))
final_fit <- final_model %>%
fit(data = training_ratings)
# Inspect trained model
final_fit %>%
extract_fit_parsnip()
# Asses how model performs on unseen data
table3 <- predict(final_fit, testing_ratings) %>%
bind_cols(testing_ratings) %>%
metrics(truth = rating.x, estimate = .pred)
table3
# RandomForest recipe
wine_rec <- recipe(rating.x ~ ., data = training_ratings) %>%
step_zv(all_numeric_predictors())
# RandomForest specification model
model_spec <- rand_forest(
mtry = tune(),
min_n = 10,
trees = 100
) %>%
set_engine("ranger", num.threads = 10,
importance = "permutation") %>%
set_mode("regression")
# Inspect the low level call
model_spec %>%
translate()
# Building the workflow
(model_workflow <- workflow() %>%
add_recipe(wine_rec) %>%
add_model(model_spec))
# Cross validation
(cv_folds <- vfold_cv(training_ratings, v = 5, repeats = 1))
# Set regular grid
grid_vals <- grid_regular(mtry(range = c(10, 18)), levels = 5)
model_res <- model_workflow %>%
tune_grid(
resamples = cv_folds,
grid = grid_vals,
control = control_grid(save_pred = TRUE),
metrics = metric_set(rmse)
)
# final fit and evaluation
best_params <- model_res %>%
show_best(metric = "rmse") %>%
slice(1)
# Plug optimal hyperparameters into workflow & fit on all training data
(final_model <- finalize_workflow(model_workflow, best_params))
final_fit <- final_model %>%
fit(data = training_ratings)
# Inspect trained model
final_fit %>%
extract_fit_parsnip()
# Asses how model performs on unseen data
table3 <- predict(final_fit, testing_ratings) %>%
bind_cols(testing_ratings) %>%
metrics(truth = rating.x, estimate = .pred)
table3
# Create empty table
datatab1 <- data[1:5,] %>% tibble::as_tibble()
# Populate with useful columns
datatab1 <- datatab1 %>%
select(c("id", "rating", "note", "language", "created_at", "flavor_word_matches", "user_is_featured", "user_is_premium", "user_statistics_followers_count", "user_statistics_followings_count", "user_statistics_ratings_count", "user_statistics_ratings_sum", "user_statistics_reviews_count", "user_statistics_purchase_order_count", "vintage_id", "vintage_year", "vintage_has_valid_ratings", "vintage_statistics_ratings_count", "vintage_statistics_ratings_average", "vintage_statistics_labels_count", "vintage_statistics_reviews_count", "vintage_wine_id", "vintage_wine_name", "vintage_wine_winery_name", "vintage_wine_winery_statistics_ratings_count", "vintage_wine_winery_statistics_ratings_average", "vintage_wine_winery_statistics_labels_count", "vintage_wine_winery_statistics_wines_count", "vintage_wine_statistics_ratings_count", "vintage_wine_statistics_ratings_average", "vintage_wine_statistics_labels_count", "vintage_wine_statistics_vintages_count", "activity_statistics_likes_count", "activity_statistics_comments_count"))
# Generate Table1
table1 <- kable(datatab1, "html", booktabs = TRUE, longtable = FALSE, linesep = "", caption = "") %>%
kable_styling(font_size = 10)
table1
# Create empty table
datatab1 <- data[1:5,] %>% tibble::as_tibble()
# Populate with useful columns
datatab1 <- datatab1 %>%
select(c("id", "rating", "note", "language", "created_at", "flavor_word_matches", "user_is_featured", "user_is_premium", "user_statistics_followers_count", "user_statistics_followings_count", "user_statistics_ratings_count", "user_statistics_ratings_sum", "user_statistics_reviews_count", "user_statistics_purchase_order_count", "vintage_id", "vintage_year", "vintage_has_valid_ratings", "vintage_statistics_ratings_count", "vintage_statistics_ratings_average", "vintage_statistics_labels_count", "vintage_statistics_reviews_count", "vintage_wine_id", "vintage_wine_name", "vintage_wine_winery_name", "vintage_wine_winery_statistics_ratings_count", "vintage_wine_winery_statistics_ratings_average", "vintage_wine_winery_statistics_labels_count", "vintage_wine_winery_statistics_wines_count", "vintage_wine_statistics_ratings_count", "vintage_wine_statistics_ratings_average", "vintage_wine_statistics_labels_count", "vintage_wine_statistics_vintages_count", "activity_statistics_likes_count", "activity_statistics_comments_count"))
# Generate Table1
table1 <- kable(datatab1, format = "html", booktabs = TRUE, longtable = FALSE, linesep = "", caption = "Head of data frame") %>%
kable_styling(bootstrap_options = c("striped", "hover"), font_size = 10)
table1
# Create empty table
datatab1 <- data[1:5,] %>% tibble::as_tibble()
# Populate with useful columns
datatab1 <- datatab1 %>%
select(c("id", "rating", "note", "language", "created_at", "flavor_word_matches", "user_is_featured", "user_is_premium", "user_statistics_followers_count", "user_statistics_followings_count", "user_statistics_ratings_count", "user_statistics_ratings_sum", "user_statistics_reviews_count", "user_statistics_purchase_order_count", "vintage_id", "vintage_year", "vintage_has_valid_ratings", "vintage_statistics_ratings_count", "vintage_statistics_ratings_average", "vintage_statistics_labels_count", "vintage_statistics_reviews_count", "vintage_wine_id", "vintage_wine_name", "vintage_wine_winery_name", "vintage_wine_winery_statistics_ratings_count", "vintage_wine_winery_statistics_ratings_average", "vintage_wine_winery_statistics_labels_count", "vintage_wine_winery_statistics_wines_count", "vintage_wine_statistics_ratings_count", "vintage_wine_statistics_ratings_average", "vintage_wine_statistics_labels_count", "vintage_wine_statistics_vintages_count", "activity_statistics_likes_count", "activity_statistics_comments_count"))
# Generate Table1
table1 <- kable(datatab1, format = "html", booktabs = TRUE, longtable = FALSE, linesep = "", caption = "Head of data frame") %>%
kable_styling(bootstrap_options = c("striped", "hover"), font_size = 10)
table1
View(datatab1)
# Load necessary packages
pacman::p_load(bonsai,
broom,
dbbasic,
dplyr,
ggplot2,
ggwordcloud,
glue,
here,
kableExtra,
knitr,
ldatuning,                   ############# update @ both rmd's
modeltime,
pacman,
pdp,
quanteda,
randomForest,
readr,
remotes,
stopwords,
stringr,
targets,
tibble,
tidymodels,
tidyr,
tidytext,
tidyverse,
topicmodels,
vip,
wordcloud,
xtable)
# Create empty table
datatab1 <- data[1:5, ] %>%
as_tibble()
# Populate with useful columns
datatab1 <- datatab1 %>%
select(c("id", "rating", "note", "language", "created_at", "flavor_word_matches", "user_is_featured", "user_is_premium", "user_statistics_followers_count", "user_statistics_followings_count", "user_statistics_ratings_count", "user_statistics_ratings_sum", "user_statistics_reviews_count", "user_statistics_purchase_order_count", "vintage_id", "vintage_year", "vintage_has_valid_ratings", "vintage_statistics_ratings_count", "vintage_statistics_ratings_average", "vintage_statistics_labels_count", "vintage_statistics_reviews_count", "vintage_wine_id", "vintage_wine_name", "vintage_wine_winery_name", "vintage_wine_winery_statistics_ratings_count", "vintage_wine_winery_statistics_ratings_average", "vintage_wine_winery_statistics_labels_count", "vintage_wine_winery_statistics_wines_count", "vintage_wine_statistics_ratings_count", "vintage_wine_statistics_ratings_average", "vintage_wine_statistics_labels_count", "vintage_wine_statistics_vintages_count", "activity_statistics_likes_count", "activity_statistics_comments_count"))
# Generate Table1
table1 <- kable(datatab1, format = "html", booktabs = TRUE, linesep = "", caption = "") %>%
kable_styling(full_width = FALSE, font_size = 12) %>%
scroll_box(width = "100%", height = "500px")
print(table1)
